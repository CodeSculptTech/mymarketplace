@page "/details/{identifier}/{version}"
@inject ExtensionClient Client
@inject HttpClient http
@inject NavigationManager Navigator
@using System.Net

@code {
    [Parameter]
    public string? Identifier { get; set; }

    [Parameter]
    public string? Version { get; set; }

    [CascadingParameter]
    public IEnumerable<ExtensionPackage>? Packages { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await LoadPackages();
    }

    private string ReadmeContent { get; set; } = string.Empty;
    private List<string> versions = new();

    private ExtensionManifest? SelectedExtensionVersion =>
        Packages?.FirstOrDefault()?.MainExtension;

    private List<ExtensionManifest?> ChildExtensions { get; set; } = new();
    private string[] UnavailableExtensions { get; set; } = Array.Empty<string>();

    async Task LoadPackages()
    {
        if (Identifier is not null && Version is not null)
        {
            var allPackages = (await Client.GetExtensionDetailsAsync(Identifier));
            versions = allPackages.Select(x => x.Version).Distinct().ToList();
            Packages = allPackages.Where(x => x.Identifier == Identifier && x.Version == Version);

            http.BaseAddress = new Uri(Navigator.BaseUri);
            ReadmeContent = await http.GetStringAsync(SelectedExtensionVersion!.ReadmePath);
        }
    }

    void VersionSelected(string version)
    {
        if (Version != version)
        {
            Version = version;
            Navigator.NavigateTo($"/details/{Identifier}/{version}", true);
        }
    }

    async Task OnTabChange(string key)
    {
        if(key == "readme")
            return;

        var ids = Array.Empty<string>();
        if (key == "extensionPack"){           
            ids = SelectedExtensionVersion!.ExtensionPackIds;
        } else if(key == "dependencies") {
            ids = SelectedExtensionVersion!.Dependencies;
        }

        await GetChildExtension(ids);
    }

    async Task GetChildExtension(string[] ids){
        if (ids.Length == 0)
            return;

        var items = await Client.GetExtensionPackagesAsync(ids);
        UnavailableExtensions = ids.Except(items.Select(x => x.Identifier)).ToArray();
        ChildExtensions = items.Select(x => x.MainExtension).ToList();
    }
}
<PageTitle>@SelectedExtensionVersion.DisplayName - My Marketplace</PageTitle>

<CascadingValue Value="@Packages">
    <PackageList />
</CascadingValue>
<Divider />

<Space Direction="DirectionVHType.Horizontal" Style="gap:8px">
    <Text>Version(s):</Text>
    <DropdownButton>
        <ChildContent>@Version</ChildContent>
        <Overlay>
            <Menu Selectable DefaultSelectedKeys="@(new[] {@Version})" OnMenuItemClicked="@((mi)=>VersionSelected(mi.Key))">
                 @foreach (var version in versions)
                {
                    <MenuItem Key="@version">@version</MenuItem>
                }
            </Menu>
        </Overlay>
    </DropdownButton>
</Space>
<Divider />

<Tabs OnChange="OnTabChange">
    <TabPane Key="readme" Tab="Overview">
        <Readme ReadmeContent="@ReadmeContent" />
    </TabPane>
    @if (SelectedExtensionVersion!.IsExtensionPack)
    {
        <TabPane Key="extensionPack" Tab='@string.Format("Extension Pack ({0})", SelectedExtensionVersion!.ExtensionPackIds.Length)'>
            <CascadingValue Value="@UnavailableExtensions" Name="UnavailableExtensions">
                <CascadingValue Value="@ChildExtensions" Name="AvailableExtensions">
                    <SimplePackageList />
                </CascadingValue>
            </CascadingValue>
        </TabPane>
    }

    @if(SelectedExtensionVersion!.HasDependencies)
    {
        <TabPane Key="dependencies" Tab="Dependencies">
            <CascadingValue Value="@UnavailableExtensions" Name="UnavailableExtensions">
                <CascadingValue Value="@ChildExtensions" Name="AvailableExtensions">
                    <SimplePackageList />
                </CascadingValue>
            </CascadingValue>
        </TabPane>
    }
    </Tabs>