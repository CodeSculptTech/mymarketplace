@page "/"
@using System.Diagnostics;
@inject ExtensionClient Client
@inject IMessageService _message
@inject ILogger<Index> _logger

@code {
    string SizeLarge = "large";

    [Parameter]
    public bool PreRelease { get; set; }

    async void OnPreReleaseChange(bool value)
    {
        PreRelease = value;
        await LoadPackages();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadPackages();
    }

    [CascadingParameter]
    public IEnumerable<ExtensionPackage>? Packages { get; set; }

    void OnFileChange(UploadInfo info)
    {
        if (info.File.State == UploadState.Uploading)
        {
            _logger.LogInformation($"{info.File.FileName} file is uploading");
        }

        if (info.File.State == UploadState.Success)
        {
            _logger.LogInformation($"{info.File.FileName} file uploaded successfully");
            _message.Success($"{info.File.FileName} file uploaded successfully");
        }
        else if (info.File.State == UploadState.Fail)
        {
            _logger.LogError($"{info.File.FileName} file upload failed");
            _message.Error($"{info.File.FileName} file upload failed");
        }
    }

    async Task UploadsCompleted()
    {
        await LoadPackages();
        await InvokeAsync(() => StateHasChanged());
    }

    async Task LoadPackages()
    {
        Packages = (await Client.GetExtensionsAsync(PreRelease)).DistinctBy(x => x.Identifier);
    }
}
<PageTitle>My Marketplace - Available Extensions</PageTitle>

<Space Align="center" Size="@SizeLarge" Style="gap:24px">
    <Upload Name="file" Action="/extension" OnChange="OnFileChange" Multiple OnCompleted="UploadsCompleted">
        <Button Icon="@IconType.Outline.Plus">Upload Extension</Button>
    </Upload>
    <Space Style="gap:8px">
        <Text>Show pre-release</Text>
        <Switch OnChange="OnPreReleaseChange"/>
    </Space>
</Space>
<Divider/>
<CascadingValue Value="@Packages">
    <PackageList />
</CascadingValue>
