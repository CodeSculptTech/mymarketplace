@using System.Net;
@inject ExtensionClient Client
@inject IHttpContextAccessor http
@inject IMessageService _message
@inject HttpClient _httpClient
@inject NavigationManager Navigator
@code {
    [CascadingParameter]
    public IEnumerable<ExtensionPackage>? Packages { get; set; }

    string SizeSmall = "small";

    private async Task DeletePackage(string identifer)
    {
        if (await Client.DeletePackage(identifer))
        {
            await _message.Success($"{identifer} Package deleted");
            Navigator.NavigateTo("/", true);
        }
        else
        {
            await _message.Error($"Failed to delete {identifer} package");
        }
    }

    private async Task DownloadPackage(ExtensionPackage package, string target)
    {
        var location = package.Extensions.Where(x => x.Target == target).First().Location;
        string downloadUri = $"/download/{package.Identifier}/{package.Version}/{target}";
        Navigator.NavigateTo(downloadUri, true);
        
    }

    public RenderFragment[] GetValidActions(ExtensionPackage package)
    {
        string downloadUri = $"/download/{package.Identifier}/{package.Version}/{package.Extensions[0].Target}";
        int multiples = package.Extensions.Count;
        RenderFragment download =@<DownloadButton Type="@ButtonType.Primary" Icon="@IconType.Outline.Download" Url="@downloadUri">Download</DownloadButton>;
        RenderFragment delete =@<Popconfirm Style="display:contents" Title="Are you sure you want to delete?" OnConfirm="@(()=>DeletePackage(package.Identifier))"><Button Type="@ButtonType.Primary" Icon="@IconType.Outline.Delete"/></Popconfirm>;

        RenderFragment downloadMultiple = null;

        if (package.Extensions.Count > 1)
        {
            downloadMultiple =@<Dropdown><Overlay><Menu Selectable="true" OnMenuItemClicked="@((mi)=>DownloadPackage(package, mi.Key))">
                @foreach(var platform in package.Extensions)
                {
                    <MenuItem Key="@platform.Target" Title="@platform.Target"/>
                }
                </Menu></Overlay><ChildContent><Button Type="@ButtonType.Primary" Icon="@IconType.Outline.ArrowDown"><Space>Download</Space></Button></ChildContent></Dropdown>;
        }

        if (http.HttpContext is not null && http.HttpContext.User.IsInRole("Admins"))
        {
            return new RenderFragment[] { ((multiples > 1) ? downloadMultiple : download), delete };
        }
        else
        {
            return new RenderFragment[] { ((multiples > 1) ? downloadMultiple : download) };
        }
    }
}

@if (Packages is null)
{
    <div class="d-flex justify-content-center align-items-center vh-100">
        <Skeleton Avatar="true" ParagraphRows="4" Active="true"></Skeleton>
    </div>
}
else
{
    <AntList TItem="ExtensionPackage" DataSource="@Packages">
        <ListItem Actions="@GetValidActions(context)">
            <ListItemMeta>
                <DescriptionTemplate>
                    @context.Extensions[0].Description
                </DescriptionTemplate>
                <AvatarTemplate>
                    <Avatar Shape="@AvatarShape.Square" Size="64" Src="@context.Extensions[0].PackageIconPath" />
                </AvatarTemplate>
                <TitleTemplate>
                    <Space Direction="DirectionVHType.Vertical" Size="@SizeSmall">
                        <Space Align="center" Style="gap:8px">
                            <NavLink href="@($"/details/{context.Extensions[0].Identifier}/{context.Extensions[0].Version}")">
                                @context.Extensions[0].DisplayName
                            </NavLink>
                            <Tag>@($"v{context.Version}")
                        </Tag>
                            </Space>
                        <Text Type="@TextElementType.Secondary">@context.Identifier</Text>
                    </Space>
                </TitleTemplate>
            </ListItemMeta>
        </ListItem>
    </AntList>
}